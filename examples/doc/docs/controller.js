// Generated by CoffeeScript 1.6.3
(function() {
  window.docs_controller = {
    id: 'controller',
    title: 'Controller',
    content: 'The controller in casua, are behind the DOM elements, used to response the user interaction and update the result to the view. Todo that, a controller should have some methods, which can binded as event handler of DOM element, or as computed value to html, attrbutes or condition of DOM el ement.',
    sections: [
      {
        id: 'define',
        title: 'To define a controller',
        content: "```javascript\nexampleController = casua.defineController( function (scope) {\n  /* Constructor \n   * This constructor function will be called when everytime the controller be instantiated.\n   * Over here, You can initialize data to scope, such as loading data from backend api.\n   */\n  scope.set('amount', 10);\n  return {\n    /* Returns Methods\n     * Everytime controller is invoked, should return a object, which contained some methods like following, to bind with view.\n     */\n    computedAmount: function () {\n      // Return a computed value\n      return scope.get('amount') + 100;\n    },\n    onClickClearAmount: function (event) {\n      // Binded as a onclick event handler, argument event passed in is a DOM Event.\n      scope.set('amount', 0);\n    }\n  };\n} );\n\n```\n\nIn fact, casua is designed to be used together with coffeescript, the code above in coffeescript will be more simple and clear, like:\n\n```coffeescript\nexampleController = casua.defineController (scope) ->\n  scope.set('amount', 10)\n\n  computedAmount: -> scope.get('amount') + 100 \n  onClickClearAmount: (e) -> scope.set('amount', 0)\n\n```"
      }, {
        id: 'new',
        title: 'New Controller',
        content: "After you defined prototype of controller, you can use `new` opreator to get a instance of the controller.\n\n`instance = new exampleController(init_data, parent_controller)`\n - `init_data` *[ Object / casua.Scope ]* all passed in `init_data` will be converted to casua.Scope, and can be accessed by `scope` in controller\n - `parent_controller` Optional, parent of current controller"
      }, {
        id: 'render',
        title: 'render() / renderAt()',
        content: "Once you get a instance of controller, contained the scope of data, you can render the view with the template to DOM element.\n\n`instance.renderAt(container, template)`\n\nThe `container` here, can be a casua.Node, DOM element, or even a jQuery object.\n\n`node = instance.render(template)`\n\nReturn a div node, which as container of the view, for you can insert it to anywhere later."
      }, {
        id: 'content',
        title: 'Context in method',
        content: "Within method is invoked, is a context, you can use `this` or `@` (in coffeescript) to access.\n\n```coffeescript\ncontrollerPrototype = casua.defineController (scope) ->\n\n  accessContextExample: -> \n    @ or this # the context\n    this.anotherMethod() # call another method in controller\n    this.$parent # refers to parent controller is exist\n    this.$parent.someMethod() # call the method in parent controller\n    this.$node() # get the current node that this `accessContextExample` is binded to\n    this.$node('$root') # get the named node `$root`, which default is root node of controller\n    this.$node('.name') # <=> this.$node().find('.name')\n\n    this.$parent.$node() # can NOT do that, access parent nodes\n\n  anotherMethod: ->\n    console.log 'called'\n```"
      }, {
        id: 'example',
        title: 'Example',
        content: "```coffeescript\nexampleController = casua.defineController (scope) ->\n  scope.set 'was_or_not', 'was not'\n  onClick: -> scope.set 'was_or_not', 'was'\n\napp_node = new casua.Node document.getElementById('app')\n\ntemplate =\n  'div':\n    '@on click': 'onClick()'\n    '@text': 'this {{@was_or_not}} clicked'\n\nnew exampleController().renderAt app_node, template\n```"
      }
    ]
  };

}).call(this);
